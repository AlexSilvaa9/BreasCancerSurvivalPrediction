normalized_data <- as.data.frame(scale(numeric_data))
# Combine normalized numeric variables with non-numeric variables
data <- cbind(data[, !numeric_vars], normalized_data)
# Identify numeric variables
numeric_vars <- sapply(data, is.numeric)
# Impute missing values in numeric variables using the mean
for (var in names(data)[numeric_vars]) {
mean_value <- mean(data[[var]], na.rm = TRUE) # Calculate the mean excluding NA values
data[[var]][is.na(data[[var]])] <- mean_value # Replace NA values with the mean
}
# View the summary of the updated data
# Función para calcular la moda de un vector
Mode <- function(x) {
if (length(unique(x)) == 1) {
return(unique(x))
} else {
tbl <- table(x)
return(names(tbl)[which.max(tbl)])
}
}
# Obtener nombres de columnas categóricas
columnas_categoricas <- sapply(data, is.factor)
# Imputación por moda para todas las columnas categóricas con valores perdidos
data[columnas_categoricas] <- lapply(data[columnas_categoricas], function(x) {
moda <- Mode(x)
x[is.na(x)] <- moda
return(x)
})
data$HISTOLOGIA
levels(data$HISTOLOGIA)
# Define the broad categories and map existing values to these categories
data$HISTOLOGIA[data$HISTOLOGIA %in% c("DCIS", "DUCTAL")] <- "Ductal"
data$HISTOLOGIA[data$HISTOLOGIA %in% c("LOBULILLAR")] <- "Lobular"
data$HISTOLOGIA[data$HISTOLOGIA %in% c("ADENOIDE", "COLOIDE", "MEDULAR", "MIXTO", "MUCINOSO", "PAPILAR", "PHILOIDES", "TUBULAR")] <- "Other"
data$HISTOLOGIA <- as.factor(data$HISTOLOGIA)
print(summary(data))
knitr::opts_chunk$set(
fig.align   = 'center', # how to align graphics in the final doc. 'left', 'right', 'center'
warning     = FALSE)    # if FALSE knitr will not display any warning messages in the final document
library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(ggthemes)
library(gridExtra)
source("../analisis_automatico.R")
library(kableExtra)
library(broom)
library(MASS)
library(reshape2)
library(ROCR)
library(caret)
library(purrr)
library(tidyr)
library(e1071)
library(nnet)
library(pROC)
library(rpart)
library(rpart.plot)
library(class)
library(knitr)
library(dplyr)
library(ROSE)
library(randomForest)
library(mboost)
library(mice)
# Create data for the table
# Crear los datos para la tabla
column <- c("EDAD_DCO", "F.DIAG", "MENOP", "CIRUGIA", "HISTOLOGIA", "TAM",
"GRADO", "RE", "RP", "HER2", "KI67", "FENOTIPO", "GANGLIOS", "ESTADIO", "ESTADO_ACTUAL")
description <- c("Patient age at diagnosis in years",
"Date of diagnosis",
"Menopausal status",
"Surgery type",
"Histology type",
"Tumor size (cm)",
"Tumor grade (1 to 3)",
"Estrogen receptors percentage",
"Progesterone receptors percentage",
"Her2 expression (Positive/Negative)",
"Ki-67 index (percentage)",
"Phenotype determined by PAM50",
"Number of affected lymph nodes",
"Disease stage (from T1 to T4)",
"Current status of the patient")
# Crear el dataframe
datos <- data.frame(Column = column, Description = description)
# Generar la tabla HTML con kable y aplicar estilos con kableExtra
styled_table <- datos %>%
kable(format = "html", align = "c", caption = "Dataset Description") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE)
# Imprimir la tabla estilizada
print(styled_table)
#Importamos los datos
data <- read_excel("exam_dataset_23.xlsx", sheet = 1) # Lee la primera hoja
data$EDAD_DCO <- cut(data$EDAD_DCO, breaks = c(-Inf, 34, 39, 49, 59,69,79, Inf), labels = c("0-34", "35-39", "40-49", "50-59", "60-69","70-79","≥80"))
data$EDAD_DCO <- as.factor(data$EDAD_DCO)
# F.diag codificado por decadas solo hay dos
data <- data %>%
mutate(F.DIAG = cut(year(F.DIAG),
breaks = seq(2000, 2020, by = 10),
labels = c("2000-2009", "2010-2019"),
right = FALSE))
data$F.DIAG <- as.factor(data$F.DIAG)
data$MENOP <- data$MENOP |> as.factor()
data$CIRUGIA <- data$CIRUGIA |> as.factor()
data$HISTOLOGIA <- data$HISTOLOGIA |> as.factor()
data$GRADO <- data$GRADO |> as.factor()
data$HER2 <- data$HER2 |> as.factor()
data$ESTADO_ACTUAL <- data$ESTADO_ACTUAL |> as.factor()
data$ESTADIO <- data$ESTADIO |> as.factor()
data$FENOTIPO <- data$FENOTIPO |> as.factor()
data <- data %>%
mutate(ESTADO_ACTUAL = fct_recode(ESTADO_ACTUAL,
"Exitus" = "MCE",
"Exitus" = "MSE",
"Exitus" = "MXE",
"Vivo" = "VCE",
"Vivo" = "VSE"))
# Reagrupar las categorías de ESTADIO en I, II, III, IV
data <- data %>%
mutate(ESTADIO = case_when(
ESTADIO %in% c("I", "IA", "IB") ~ "I",
ESTADIO %in% c("II", "IIA", "IIB") ~ "II",
ESTADIO %in% c("III", "IIIA", "IIIB", "IIIC") ~ "III",
ESTADIO %in% c("IV") ~ "IV",
TRUE ~ NA_character_  # Para manejar cualquier otro valor o NA
))
data$ESTADIO <- as.factor(data$ESTADIO)
data$GANGLIOS <- cut(data$GANGLIOS, breaks = c(-Inf,0, 3, 9, Inf), labels = c("N0","N1", "N2", "N3"))
# Select only numeric variables
numeric_vars <- sapply(data, is.numeric)
numeric_data <- data[, numeric_vars]
# Normalize the numeric variables
normalized_data <- as.data.frame(scale(numeric_data))
# Combine normalized numeric variables with non-numeric variables
data <- cbind(data[, !numeric_vars], normalized_data)
# Identify numeric variables
numeric_vars <- sapply(data, is.numeric)
# Impute missing values in numeric variables using the mean
for (var in names(data)[numeric_vars]) {
mean_value <- mean(data[[var]], na.rm = TRUE) # Calculate the mean excluding NA values
data[[var]][is.na(data[[var]])] <- mean_value # Replace NA values with the mean
}
# View the summary of the updated data
# Función para calcular la moda de un vector
Mode <- function(x) {
if (length(unique(x)) == 1) {
return(unique(x))
} else {
tbl <- table(x)
return(names(tbl)[which.max(tbl)])
}
}
# Obtener nombres de columnas categóricas
columnas_categoricas <- sapply(data, is.factor)
# Imputación por moda para todas las columnas categóricas con valores perdidos
data[columnas_categoricas] <- lapply(data[columnas_categoricas], function(x) {
moda <- Mode(x)
x[is.na(x)] <- moda
return(x)
})
levels(data$HISTOLOGIA)
# Define the broad categories and map existing values to these categories
data$HISTOLOGIA[data$HISTOLOGIA %in% c("DCIS", "DUCTAL")] <- "Ductal"
data$HISTOLOGIA[data$HISTOLOGIA %in% c("LOBULILLAR")] <- "Lobular"
data$HISTOLOGIA[data$HISTOLOGIA %in% c("ADENOIDE", "COLOIDE", "MEDULAR", "MIXTO", "MUCINOSO", "PAPILAR", "PHILOIDES", "TUBULAR")] <- "Other"
data$HISTOLOGIA <- as.factor(data$HISTOLOGIA)
print(summary(data))
knitr::opts_chunk$set(
fig.align   = 'center', # how to align graphics in the final doc. 'left', 'right', 'center'
warning     = FALSE)    # if FALSE knitr will not display any warning messages in the final document
library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(ggthemes)
library(gridExtra)
source("../analisis_automatico.R")
library(kableExtra)
library(broom)
library(MASS)
library(reshape2)
library(ROCR)
library(caret)
library(purrr)
library(tidyr)
library(e1071)
library(nnet)
library(pROC)
library(rpart)
library(rpart.plot)
library(class)
library(knitr)
library(dplyr)
library(ROSE)
library(randomForest)
library(mboost)
library(mice)
# Create data for the table
# Crear los datos para la tabla
column <- c("EDAD_DCO", "F.DIAG", "MENOP", "CIRUGIA", "HISTOLOGIA", "TAM",
"GRADO", "RE", "RP", "HER2", "KI67", "FENOTIPO", "GANGLIOS", "ESTADIO", "ESTADO_ACTUAL")
description <- c("Patient age at diagnosis in years",
"Date of diagnosis",
"Menopausal status",
"Surgery type",
"Histology type",
"Tumor size (cm)",
"Tumor grade (1 to 3)",
"Estrogen receptors percentage",
"Progesterone receptors percentage",
"Her2 expression (Positive/Negative)",
"Ki-67 index (percentage)",
"Phenotype determined by PAM50",
"Number of affected lymph nodes",
"Disease stage (from T1 to T4)",
"Current status of the patient")
# Crear el dataframe
datos <- data.frame(Column = column, Description = description)
# Generar la tabla HTML con kable y aplicar estilos con kableExtra
styled_table <- datos %>%
kable(format = "html", align = "c", caption = "Dataset Description") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE)
# Imprimir la tabla estilizada
print(styled_table)
#Importamos los datos
data <- read_excel("exam_dataset_23.xlsx", sheet = 1) # Lee la primera hoja
data$EDAD_DCO <- cut(data$EDAD_DCO, breaks = c(-Inf, 34, 39, 49, 59,69,79, Inf), labels = c("0-34", "35-39", "40-49", "50-59", "60-69","70-79","≥80"))
data$EDAD_DCO <- as.factor(data$EDAD_DCO)
# F.diag codificado por decadas solo hay dos
data <- data %>%
mutate(F.DIAG = cut(year(F.DIAG),
breaks = seq(2000, 2020, by = 10),
labels = c("2000-2009", "2010-2019"),
right = FALSE))
data$F.DIAG <- as.factor(data$F.DIAG)
data$MENOP <- data$MENOP |> as.factor()
data$CIRUGIA <- data$CIRUGIA |> as.factor()
data$GRADO <- data$GRADO |> as.factor()
data$HER2 <- data$HER2 |> as.factor()
data$ESTADO_ACTUAL <- data$ESTADO_ACTUAL |> as.factor()
data$ESTADIO <- data$ESTADIO |> as.factor()
data$FENOTIPO <- data$FENOTIPO |> as.factor()
data <- data %>%
mutate(ESTADO_ACTUAL = fct_recode(ESTADO_ACTUAL,
"Exitus" = "MCE",
"Exitus" = "MSE",
"Exitus" = "MXE",
"Vivo" = "VCE",
"Vivo" = "VSE"))
# Reagrupar las categorías de ESTADIO en I, II, III, IV
data <- data %>%
mutate(ESTADIO = case_when(
ESTADIO %in% c("I", "IA", "IB") ~ "I",
ESTADIO %in% c("II", "IIA", "IIB") ~ "II",
ESTADIO %in% c("III", "IIIA", "IIIB", "IIIC") ~ "III",
ESTADIO %in% c("IV") ~ "IV",
TRUE ~ NA_character_  # Para manejar cualquier otro valor o NA
))
data$ESTADIO <- as.factor(data$ESTADIO)
data$GANGLIOS <- cut(data$GANGLIOS, breaks = c(-Inf,0, 3, 9, Inf), labels = c("N0","N1", "N2", "N3"))
# Select only numeric variables
numeric_vars <- sapply(data, is.numeric)
numeric_data <- data[, numeric_vars]
# Normalize the numeric variables
normalized_data <- as.data.frame(scale(numeric_data))
# Combine normalized numeric variables with non-numeric variables
data <- cbind(data[, !numeric_vars], normalized_data)
# Identify numeric variables
numeric_vars <- sapply(data, is.numeric)
# Impute missing values in numeric variables using the mean
for (var in names(data)[numeric_vars]) {
mean_value <- mean(data[[var]], na.rm = TRUE) # Calculate the mean excluding NA values
data[[var]][is.na(data[[var]])] <- mean_value # Replace NA values with the mean
}
# View the summary of the updated data
# Función para calcular la moda de un vector
Mode <- function(x) {
if (length(unique(x)) == 1) {
return(unique(x))
} else {
tbl <- table(x)
return(names(tbl)[which.max(tbl)])
}
}
# Obtener nombres de columnas categóricas
columnas_categoricas <- sapply(data, is.factor)
# Imputación por moda para todas las columnas categóricas con valores perdidos
data[columnas_categoricas] <- lapply(data[columnas_categoricas], function(x) {
moda <- Mode(x)
x[is.na(x)] <- moda
return(x)
})
# Define the broad categories and map existing values to these categories
data$HISTOLOGIA[data$HISTOLOGIA %in% c("DCIS", "DUCTAL")] <- "Ductal"
data$HISTOLOGIA[data$HISTOLOGIA %in% c("LOBULILLAR")] <- "Lobular"
data$HISTOLOGIA[data$HISTOLOGIA %in% c("ADENOIDE", "COLOIDE", "MEDULAR", "MIXTO", "MUCINOSO", "PAPILAR", "PHILOIDES", "TUBULAR")] <- "Other"
data$HISTOLOGIA <- as.factor(data$HISTOLOGIA)
print(summary(data))
knitr::opts_chunk$set(
fig.align   = 'center', # how to align graphics in the final doc. 'left', 'right', 'center'
warning     = FALSE)    # if FALSE knitr will not display any warning messages in the final document
library(readxl)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(ggthemes)
library(gridExtra)
source("../analisis_automatico.R")
library(kableExtra)
library(broom)
library(MASS)
library(reshape2)
library(ROCR)
library(caret)
library(purrr)
library(tidyr)
library(e1071)
library(nnet)
library(pROC)
library(rpart)
library(rpart.plot)
library(class)
library(knitr)
library(dplyr)
library(ROSE)
library(randomForest)
library(mboost)
library(mice)
# Create data for the table
# Crear los datos para la tabla
column <- c("EDAD_DCO", "F.DIAG", "MENOP", "CIRUGIA", "HISTOLOGIA", "TAM",
"GRADO", "RE", "RP", "HER2", "KI67", "FENOTIPO", "GANGLIOS", "ESTADIO", "ESTADO_ACTUAL")
description <- c("Patient age at diagnosis in years",
"Date of diagnosis",
"Menopausal status",
"Surgery type",
"Histology type",
"Tumor size (cm)",
"Tumor grade (1 to 3)",
"Estrogen receptors percentage",
"Progesterone receptors percentage",
"Her2 expression (Positive/Negative)",
"Ki-67 index (percentage)",
"Phenotype determined by PAM50",
"Number of affected lymph nodes",
"Disease stage (from T1 to T4)",
"Current status of the patient")
# Crear el dataframe
datos <- data.frame(Column = column, Description = description)
# Generar la tabla HTML con kable y aplicar estilos con kableExtra
styled_table <- datos %>%
kable(format = "html", align = "c", caption = "Dataset Description") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE)
# Imprimir la tabla estilizada
print(styled_table)
#Importamos los datos
data <- read_excel("exam_dataset_23.xlsx", sheet = 1) # Lee la primera hoja
summary(data)
data$EDAD_DCO <- cut(data$EDAD_DCO, breaks = c(-Inf, 34, 39, 49, 59,69,79, Inf), labels = c("0-34", "35-39", "40-49", "50-59", "60-69","70-79","≥80"))
data$EDAD_DCO <- as.factor(data$EDAD_DCO)
# F.diag codificado por decadas solo hay dos
data <- data %>%
mutate(F.DIAG = cut(year(F.DIAG),
breaks = seq(2000, 2020, by = 10),
labels = c("2000-2009", "2010-2019"),
right = FALSE))
data$F.DIAG <- as.factor(data$F.DIAG)
data$MENOP <- data$MENOP |> as.factor()
data$CIRUGIA <- data$CIRUGIA |> as.factor()
data$GRADO <- data$GRADO |> as.factor()
data$HER2 <- data$HER2 |> as.factor()
data$ESTADO_ACTUAL <- data$ESTADO_ACTUAL |> as.factor()
data$ESTADIO <- data$ESTADIO |> as.factor()
data$FENOTIPO <- data$FENOTIPO |> as.factor()
data <- data %>%
mutate(ESTADO_ACTUAL = fct_recode(ESTADO_ACTUAL,
"Exitus" = "MCE",
"Exitus" = "MSE",
"Exitus" = "MXE",
"Vivo" = "VCE",
"Vivo" = "VSE"))
# Reagrupar las categorías de ESTADIO en I, II, III, IV
data <- data %>%
mutate(ESTADIO = case_when(
ESTADIO %in% c("I", "IA", "IB") ~ "I",
ESTADIO %in% c("II", "IIA", "IIB") ~ "II",
ESTADIO %in% c("III", "IIIA", "IIIB", "IIIC") ~ "III",
ESTADIO %in% c("IV") ~ "IV",
TRUE ~ NA_character_  # Para manejar cualquier otro valor o NA
))
data$ESTADIO <- as.factor(data$ESTADIO)
data$GANGLIOS <- cut(data$GANGLIOS, breaks = c(-Inf,0, 3, 9, Inf), labels = c("N0","N1", "N2", "N3"))
# Select only numeric variables
numeric_vars <- sapply(data, is.numeric)
numeric_data <- data[, numeric_vars]
# Normalize the numeric variables
normalized_data <- as.data.frame(scale(numeric_data))
# Combine normalized numeric variables with non-numeric variables
data <- cbind(data[, !numeric_vars], normalized_data)
# Identify numeric variables
numeric_vars <- sapply(data, is.numeric)
# Impute missing values in numeric variables using the mean
for (var in names(data)[numeric_vars]) {
mean_value <- mean(data[[var]], na.rm = TRUE) # Calculate the mean excluding NA values
data[[var]][is.na(data[[var]])] <- mean_value # Replace NA values with the mean
}
# View the summary of the updated data
# Función para calcular la moda de un vector
Mode <- function(x) {
if (length(unique(x)) == 1) {
return(unique(x))
} else {
tbl <- table(x)
return(names(tbl)[which.max(tbl)])
}
}
# Obtener nombres de columnas categóricas
columnas_categoricas <- sapply(data, is.factor)
# Imputación por moda para todas las columnas categóricas con valores perdidos
data[columnas_categoricas] <- lapply(data[columnas_categoricas], function(x) {
moda <- Mode(x)
x[is.na(x)] <- moda
return(x)
})
# Define the broad categories and map existing values to these categories
data$HISTOLOGIA[data$HISTOLOGIA %in% c("DCIS", "DUCTAL")] <- "Ductal"
data$HISTOLOGIA[data$HISTOLOGIA %in% c("LOBULILLAR")] <- "Lobular"
data$HISTOLOGIA[data$HISTOLOGIA %in% c("ADENOIDE", "COLOIDE", "MEDULAR", "MIXTO", "MUCINOSO", "PAPILAR", "PHILOIDES", "TUBULAR")] <- "Other"
data$HISTOLOGIA <- as.factor(data$HISTOLOGIA)
print(summary(data))
columnas <- colnames(data)
# Aplicar la función 'analsis_univariante_automatico()' a cada columna
resultados_univariante <- lapply(columnas, function(col) {
an <- analsis_univariante_automatico(data[[col]], col)
if(an$tipo=="factor"){
o <- an$grafica
}else if(an$tipo=="numeric"){
o <- an$hist
}
return(o)
})
#En una tabla las variables
marrangeGrob(resultados_univariante[1:length(resultados_univariante)-1],nrow=3,ncol=3)
#En otro grafico la variable evento
print(resultados_univariante[length(resultados_univariante)][[1]])
resultados_bi_ESTADO_ACTUAL <- lapply(columnas, function(col) {
an <- analisis_bivariante_automatico(data$ESTADO_ACTUAL, data[[col]],"ESTADO_ACTUAL",col)
return(an$grafica)
})
marrangeGrob(resultados_bi_ESTADO_ACTUAL[2:length(resultados_bi_ESTADO_ACTUAL)],nrow=2,ncol=3)
resultados_para_tabla <- lapply(columnas, function(col) {
an <- analisis_bivariante_automatico(data$ESTADO_ACTUAL, data[[col]],"ESTADO_ACTUAL",col)
return(an)
})
p_values_1 <- sapply(resultados_para_tabla, function(x) x$test$p.value)
formatted_p_values_1 <- ifelse(p_values_1 < 0.0000001, format(p_values_1, scientific = TRUE), p_values_1)
# Crear una tabla con los resultados
tabla_resultados <- data.frame(
Data_Name = sapply(resultados_para_tabla, function(x) x$test$data.name),
Estadistico = sapply(resultados_para_tabla, function(x) ifelse(is.null(x$test$statistic), NA, x$test$statistic)),
Odds = sapply(resultados_para_tabla, function(x) ifelse(is.null(x$test$estimate), NA, x$test$estimate)),
P_valor = formatted_p_values_1,
Method = sapply(resultados_para_tabla, function(x) x$test$method),
Conclusion = sapply(resultados_para_tabla, function(x) x$conclusion)
)
# Mostrar la tabla usando kable
tabla <- kable(tabla_resultados, format = "html", align = "ccc", caption = "Tabla de Resultados", row.names = FALSE, booktabs = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
tabla_con_scroll <- scroll_box(tabla, height = "400px")
# Mostrar la tabla
print(tabla_con_scroll)
resultados_bi_ESTADO_ACTUAL <- lapply(columnas, function(col) {
an <- analisis_bivariante_automatico(data$ESTADO_ACTUAL, data[[col]],"ESTADO_ACTUAL",col)
return(an$grafica)
})
marrangeGrob(resultados_bi_ESTADO_ACTUAL[2:length(resultados_bi_ESTADO_ACTUAL)],nrow=2,ncol=3)
resultados_para_tabla <- lapply(columnas, function(col) {
an <- analisis_bivariante_automatico(data$ESTADO_ACTUAL, data[[col]],"ESTADO_ACTUAL",col)
return(an)
})
p_values_1 <- sapply(resultados_para_tabla, function(x) x$test$p.value)
formatted_p_values_1 <- ifelse(p_values_1 < 0.0000001, format(p_values_1, scientific = TRUE), p_values_1)
# Crear una tabla con los resultados
tabla_resultados <- data.frame(
Data_Name = sapply(resultados_para_tabla, function(x) x$test$data.name),
Estadistico = sapply(resultados_para_tabla, function(x) ifelse(is.null(x$test$statistic), NA, x$test$statistic)),
Odds = sapply(resultados_para_tabla, function(x) ifelse(is.null(x$test$estimate), NA, x$test$estimate)),
P_valor = formatted_p_values_1,
Method = sapply(resultados_para_tabla, function(x) x$test$method),
Conclusion = sapply(resultados_para_tabla, function(x) x$conclusion)
)
# Mostrar la tabla usando kable
tabla <- kable(tabla_resultados, format = "html", align = "ccc", caption = "Tabla de Resultados", row.names = FALSE, booktabs = TRUE) %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
tabla_con_scroll <- scroll_box(tabla, height = "400px")
# Mostrar la tabla
print(tabla_con_scroll)
# Crear una matriz vacía para almacenar los p-valores
num_variables <- ncol(data)
p_valores <- matrix(NA, nrow = num_variables, ncol = num_variables)
# Función para calcular los p-valores entre dos variables
calcular_p_valores <- function(i, j) {
an <- analisis_bivariante_automatico(data[, i], data[, j], "a", "a")
return(an$test$p.value)
}
# Calcular los p-valores para todas las combinaciones de variables utilizando lapply
indices <- expand.grid(1:num_variables, 1:num_variables)
p_valores <- matrix(unlist(lapply(1:nrow(indices), function(idx) {
calcular_p_valores(indices[idx, 1], indices[idx, 2])
})), nrow = num_variables, byrow = TRUE)
